[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[sub_resource type="Shader" id=60]
code = "shader_type canvas_item;

// pixelate
uniform float pixelFactor : hint_range(0, 10) = 2;

// noise
uniform sampler2D noise;
uniform float speed : hint_range (0, 30) = 14;

// coloring
uniform sampler2D Colormap : hint_albedo;


void fragment() {
	

	vec2 pixelNumber = vec2(textureSize(TEXTURE, 0)) / pixelFactor; // Å¡tevilo pixlov
//	vec2 pixelatedUV = ((floor(UV * pixelNumber) + 0.5) / pixelNumber) + TIME/speed; // These pixelizations are aligned to the top left. If you do a bit of trickery with offsets, you can centre them. 
	vec2 pixelatedUV = ((floor(UV * pixelNumber) + 0.5) / pixelNumber); // These pixelizations are aligned to the top left. If you do a bit of trickery with offsets, you can centre them. 
	
	vec4 noise_pixelated = texture(noise,pixelatedUV);
//	COLOR = texture(noise,pixelatedUV);
//	COLOR.rgb = vec3(noise_static, 0.5, noise_val);


// coloring

	// Get the fragment location
	vec3 location = vec3(UV, 0.0);

	// Get the colors from the image at specified location
	vec3 colorIn;
	float alphaIn;
	{
		vec4 TEXTURE_tex_read = noise_pixelated;
//		vec4 TEXTURE_tex_read = texture(TEXTURE, location.xy);
		colorIn = TEXTURE_tex_read.rgb;
		alphaIn = TEXTURE_tex_read.a;
	}

	// get the greyscale value through the highest of r, g, and b
	float grey;
	{
		vec3 c = colorIn;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		grey = max2;
	}

	// Read the colormap and use the greyscale value to map in the new color.
	vec3 colorOut;
	float alphaOut;
	{
		vec4 n_tex_read = texture(Colormap, vec2(grey, 0.0));
		colorOut = n_tex_read.rgb;
		alphaOut = n_tex_read.a;
	}

	// Profit.
	COLOR.rgb = colorOut;
	COLOR.a = alphaIn;

}
"

[sub_resource type="Gradient" id=54]
interpolation_mode = 1
offsets = PoolRealArray( 0, 0.449438, 0.519101, 0.669663, 0.838202 )
colors = PoolColorArray( 0.183372, 0.0191498, 0.258018, 1, 0.326809, 0.0661011, 0.445312, 1, 0.4317, 0.138947, 0.613281, 1, 0.728836, 0.227539, 0.910156, 1, 0.927925, 0.793457, 0.976562, 1 )

[sub_resource type="GradientTexture" id=61]
gradient = SubResource( 54 )

[sub_resource type="OpenSimplexNoise" id=37]
seed = 9
octaves = 1
period = 0.1
persistence = 0.382
lacunarity = 2.02

[sub_resource type="NoiseTexture" id=62]
width = 32
height = 32
seamless = true
bump_strength = 1.6
noise = SubResource( 37 )

[resource]
shader = SubResource( 60 )
shader_param/pixelFactor = 1.0
shader_param/speed = 8.329
shader_param/noise = SubResource( 62 )
shader_param/Colormap = SubResource( 61 )
