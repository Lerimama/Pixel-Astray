[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=39]
code = "shader_type canvas_item;

// pixelate
uniform float pixelFactor : hint_range(0, 10) = 2;

// noise
uniform sampler2D noise;
uniform float speed : hint_range (0, 30) = 14;

void fragment() {
	
	
	vec2 pixelNumber = vec2(textureSize(TEXTURE, 0)) / pixelFactor; // Å¡tevilo pixlov
	vec2 pixelatedUV = ((floor(UV * pixelNumber) + 0.5) / pixelNumber) + TIME/speed; // These pixelizations are aligned to the top left. If you do a bit of trickery with offsets, you can centre them. 
	
	COLOR = texture(noise,pixelatedUV);
//	COLOR.rgb = vec3(noise_static, 0.5, noise_val);
	

}
"

[sub_resource type="OpenSimplexNoise" id=63]
seed = 9
octaves = 1
period = 0.1
persistence = 0.382
lacunarity = 2.02

[sub_resource type="NoiseTexture" id=38]
width = 32
height = 32
seamless = true
bump_strength = 1.6
noise = SubResource( 63 )

[resource]
shader = SubResource( 39 )
shader_param/pixelFactor = 2.0
shader_param/speed = 20.119
shader_param/noise = SubResource( 38 )
