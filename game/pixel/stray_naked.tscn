[gd_scene load_steps=39 format=2]

[ext_resource path="res://assets/resources/animation/stray_glitch_3.tres" type="Animation" id=1]
[ext_resource path="res://assets/resources/animation/stray_glitch_1.tres" type="Animation" id=2]
[ext_resource path="res://assets/resources/animation/stray_glitch_2.tres" type="Animation" id=3]
[ext_resource path="res://assets/sound/sfx/blinking/blink_3.wav" type="AudioStream" id=4]
[ext_resource path="res://assets/sound/sfx/blinking/blink_4.wav" type="AudioStream" id=5]
[ext_resource path="res://assets/sound/sfx/blinking/blink_static_3.wav" type="AudioStream" id=6]
[ext_resource path="res://assets/sound/sfx/blinking/blink_static_5.wav" type="AudioStream" id=8]
[ext_resource path="res://assets/sound/sfx/blinking/blink_static_1.wav" type="AudioStream" id=9]
[ext_resource path="res://assets/sound/sfx/stepping/step_5.wav" type="AudioStream" id=10]
[ext_resource path="res://assets/sound/sfx/stepping/step_1.wav" type="AudioStream" id=11]
[ext_resource path="res://assets/sound/sfx/blinking/blink_2.wav" type="AudioStream" id=12]
[ext_resource path="res://assets/sound/sfx/blinking/blink_static_4.wav" type="AudioStream" id=13]
[ext_resource path="res://assets/sound/sfx/blinking/blink_1.wav" type="AudioStream" id=14]
[ext_resource path="res://assets/sound/sfx/blinking/blink_static_2.wav" type="AudioStream" id=15]
[ext_resource path="res://assets/sound/sfx/stepping/step_3.wav" type="AudioStream" id=16]
[ext_resource path="res://assets/sound/sfx/stepping/step_4.wav" type="AudioStream" id=17]
[ext_resource path="res://assets/sound/sfx/blinking/blink_static_6.wav" type="AudioStream" id=18]
[ext_resource path="res://assets/sound/sfx/stepping/step_2.wav" type="AudioStream" id=19]

[sub_resource type="GDScript" id=153]
script/source = "extends KinematicBody2D
class_name Stray_naked

enum States {IDLE, MOVING, DYING, WALL} # STATIC # static, unmovable ... ko je GO ali pa je poden
var current_state = States.IDLE # ni vready, da lahko setam že ob spawnu

var stray_color: Color
var step_attempt: int = 1 # če nima prostora, proba v drugo smer (največ 4krat)
var visible_on_screen: bool = false

onready var collision_shape: CollisionShape2D = $CollisionShape2D
onready var collision_shape_ext: CollisionShape2D = $CollisionShapeExt
onready var vision_rays: Array = [$Vision/VisionRay1, $Vision/VisionRay2, $Vision/VisionRay3]
onready var vision: Node2D = $Vision
onready var color_poly: Polygon2D = $ColorPoly
onready var animation_player: AnimationPlayer = $AnimationPlayer
onready var position_indicator: Node2D = $PositionIndicator
onready var position_indicator_poly: Polygon2D = $PositionIndicator/PositionPoly
onready var visibility_notifier_2d: VisibilityNotifier2D = $VisibilityNotifier2D
onready var cell_size_x: int = Global.current_tilemap.cell_size.x

# debug
onready var count_label: Label = $CountLabel 


func _ready() -> void:
	
	add_to_group(Global.group_strays)
	randomize() # za random die animacije
	
	color_poly.modulate = stray_color
	modulate.a = 0
	count_label.text = name
	position_indicator_poly.color = stray_color
	position_indicator.set_as_toplevel(true) # strayse skrijem ko so offscreen
	position_indicator.visible = false

	end_move()


func _process(delta: float) -> void:
	
	if Global.game_manager.show_position_indicators:
		if not position_indicator.visible:
			fade_position_indicator(true)
	else:
		if position_indicator.visible:
			fade_position_indicator(false)
	
	if position_indicator.visible:
		get_position_indicator_position(get_viewport().get_node(\"PlayerCamera\"))
	
	
func show_stray(): # kliče GM
	
	$OverspawnDetect.monitoring = false
	$OverspawnDetect.monitorable = false
	
	# če je pozicija res prazna						
	if current_state == States.WALL:
		die_to_wall()
	else:
		# žrebam animacijo
		var random_animation_index = randi() % 3 + 1
		var random_animation_name: String = \"glitch_%s\" % random_animation_index
		animation_player.play(random_animation_name)
	
	
func die(stray_in_stack_index: int, strays_in_stack_count: int):
	
	if current_state == States.DYING:
		return
	current_state = States.DYING
	
	global_position = Global.snap_to_nearest_grid(self) 
	
	# čakalni čas
	var wait_to_destroy_time: float = sqrt(0.07 * (stray_in_stack_index)) # -1 je, da hitan stray ne čaka
	yield(get_tree().create_timer(wait_to_destroy_time), \"timeout\")
	
	# animacije
	if strays_in_stack_count <= 3: # žrebam
		var random_animation_index = randi() % 5 + 1
		var random_animation_name: String = \"die_stray_%s\" % random_animation_index
		animation_player.play(random_animation_name) 
	else: # ne žrebam
		animation_player.play(\"die_stray\")

	position_indicator.modulate.a = 0	
	collision_shape.set_deferred(\"disabled\", true)
	collision_shape_ext.set_deferred(\"disabled\", true)
	
	# color vanish
	var vanish_time = animation_player.get_current_animation_length()
	var vanish_tween = get_tree().create_tween()
	vanish_tween.tween_property(self, \"color_poly:modulate:a\", 0, vanish_time).set_ease(Tween.EASE_IN).set_trans(Tween.TRANS_CIRC)
	
	# na koncu animacije sledi KVEFRI in ostalo
	

func die_to_wall():
	
	current_state = States.WALL
	
	var random_animation_index = randi() % 5 + 1
	var random_animation_name: String = \"die_stray_%s\" % random_animation_index
	animation_player.play(random_animation_name) 
	
	# na koncu animacije sledi ostalo
	
	
# MOVEMENT ------------------------------------------------------------------------------------------------------
	
	
func step(step_direction: Vector2 = Vector2.DOWN):
	
	if not current_state == States.IDLE:
		return
		
	var current_collider = detect_collision_in_direction(step_direction)
	
	if current_collider:
		step_attempt += 1
		if step_attempt < 5:
			var new_direction = step_direction.rotated(deg2rad(90))
			step(new_direction)
			step_attempt = 1
		return
	
	current_state = States.MOVING
	
	collision_shape_ext.position = step_direction * cell_size_x # vržem koližn v smer premika
	
	var step_time: float = 0.2
	
	var step_tween = get_tree().create_tween().set_trans(Tween.TRANS_CUBIC).set_ease(Tween.EASE_IN_OUT)	
	step_tween.tween_property(self, \"position\", global_position + step_direction * cell_size_x, step_time)
	step_tween.parallel().tween_property(collision_shape_ext, \"position\", Vector2.ZERO, step_time)
	step_tween.tween_callback(self, \"end_move\")


func push_stray(push_direction: Vector2, push_cock_time: float, push_time: float):
	
	current_state = States.MOVING
	var stray_move_time: float = 0.08
	var heavier_hit_delay: float = 0.05  # z delayom je porinek bolj pristen in \"težak\"
	
	var push_tween = get_tree().create_tween()
	# ko napnem plejerja
	push_tween.tween_property(collision_shape_ext, \"position\", - push_direction * cell_size_x, push_cock_time).set_trans(Tween.TRANS_CUBIC).set_ease(Tween.EASE_OUT) # animiram simultano s premikom plejerja
	# spustim
	push_tween.tween_property(collision_shape_ext, \"position\", Vector2.ZERO, push_time).set_trans(Tween.TRANS_EXPO).set_ease(Tween.EASE_IN) # vrnem jo na 0 pozicijo
	push_tween.tween_callback(collision_shape_ext, \"set_position\", [push_direction * cell_size_x]) # potem jo takoj vržem pred straja, da zaščiti premik naprej
	push_tween.tween_property(self, \"position\", global_position + push_direction * cell_size_x, stray_move_time).set_trans(Tween.TRANS_CUBIC).set_ease(Tween.EASE_OUT).set_delay(heavier_hit_delay)
	push_tween.parallel().tween_property(collision_shape_ext, \"position\", Vector2.ZERO, stray_move_time).set_trans(Tween.TRANS_CUBIC).set_ease(Tween.EASE_OUT).set_delay(heavier_hit_delay)
	push_tween.tween_callback(self, \"end_move\")
	
	
func pull_stray(pull_direction: Vector2, pull_cock_time: float, pull_time: float):
	
	current_state = States.MOVING

	var pull_tween = get_tree().create_tween().set_trans(Tween.TRANS_CUBIC).set_ease(Tween.EASE_IN_OUT)
	pull_tween.tween_property(collision_shape_ext, \"position\", pull_direction * cell_size_x, pull_cock_time) # collision_ext v smer premika (animiram s premikom plejerja)
	pull_tween.tween_property(self, \"position\", global_position + pull_direction * cell_size_x, pull_time)#.set_delay(pull_time)
	pull_tween.parallel().tween_property(collision_shape_ext, \"position\", Vector2.ZERO, pull_time) # stray ext shape
	pull_tween.tween_callback(self, \"end_move\")


func end_move():
	
	if current_state == States.MOVING: # da se stanje resetira samo če ni DYING al pa WALL
		current_state = States.IDLE
	global_position = Global.snap_to_nearest_grid(self)
	
	
# UTILITI ------------------------------------------------------------------------------------------------------


func get_position_indicator_position(current_camera: Camera2D):
	
	var viewport_position = get_viewport_rect().position
	var viewport_size = get_viewport_rect().end
	var current_camera_position = current_camera.get_camera_screen_center()
	
	var camera_edge_clamp_down_x = current_camera_position.x - viewport_size.x/2 + cell_size_x/2 # polovička vp-ja na vsako stran centra kamere
	var camera_edge_clamp_up_x = current_camera_position.x + viewport_size.x/2 - cell_size_x/2
	var camera_edge_clamp_down_y = current_camera_position.y - viewport_size.y/2 + cell_size_x/2 # polovička vp-ja na vsako stran centra kamere
	var camera_edge_clamp_up_y = current_camera_position.y + viewport_size.y/2 - cell_size_x/2
		
	position_indicator.global_position = global_position
	position_indicator.global_position.x = clamp(position_indicator.global_position.x, camera_edge_clamp_down_x, camera_edge_clamp_up_x)
	position_indicator.global_position.y = clamp(position_indicator.global_position.y, camera_edge_clamp_down_y, camera_edge_clamp_up_y)
	

func play_sound(effect_for: String):
	
	if Global.sound_manager.game_sfx_set_to_off:
		return
		
	match effect_for:
		\"turning_color\":
			var random_blink_index = randi() % $Sounds/Blinking.get_child_count()
			$Sounds/Blinking.get_child(random_blink_index).play() # nekateri so na mute, ker so drugače prepogosti soundi
		\"blinking\":
			var random_blink_index = randi() % $Sounds/Blinking.get_child_count()
			$Sounds/Blinking.get_child(random_blink_index).play() # nekateri so na mute, ker so drugače prepogosti soundi
			if current_state == States.DYING: # da se ne oglaša ob obračanju v steno
				var random_static_index = randi() % $Sounds/BlinkingStatic.get_child_count()
				$Sounds/BlinkingStatic.get_child(random_static_index).play()
		\"stepping\":
			var random_step_index = randi() % $Sounds/Stepping.get_child_count()
			var selected_step_sound = $Sounds/Stepping.get_child(random_step_index).play()


func get_neighbor_strays_on_hit(): # kliče player on hit
	
	var directions_to_check: Array = [Vector2.UP, Vector2.DOWN, Vector2.LEFT, Vector2.RIGHT]
	var current_cell_neighbors: Array
	
	for direction in directions_to_check:
		var neighbor = detect_collision_in_direction(direction)
		if neighbor and neighbor.is_in_group(Global.group_strays) and not neighbor == self: # če je kolajder, je stray in ni self
			if not neighbor.current_state == neighbor.States.DYING:# # če je vstanju umiranja se ne šteje za soseda
#			if not neighbor.current_state == neighbor.States.DYING and not neighbor.current_state == neighbor.States.WALL: # če je vstanju umiranja se ne šteje za soseda
				current_cell_neighbors.append(neighbor)
				
	return current_cell_neighbors # uporaba v stalnem čekiranj sosedov

	
func detect_collision_in_direction(direction_to_check):
	
	# obrnem vision grupo v smeri...
	vision.look_at(global_position + direction_to_check)
	
	# vsi ray gledajo naravnost
	for ray in vision_rays:
		ray.cast_to = Vector2(45, 0) # en pixel manj kot 48, da ne seže preko celice
	
	# grebanje kolajderja	
	var first_collider: Node2D
	for ray in vision_rays:
		ray.add_exception(self)
		ray.force_raycast_update()
		if ray.is_colliding():
			first_collider = ray.get_collider()
			break # ko je kolajder neham čekirat
	
	return first_collider


func fade_position_indicator(fade_in: bool):
	
	var fade_time: float = 0.2
	var fade_tween = get_tree().create_tween()
	if fade_in:
		fade_tween.tween_callback(position_indicator, \"show\")
		fade_tween.tween_property(position_indicator_poly, \"modulate:a\", 1, 0.5).from(0.0)
	else:
		fade_tween.tween_property(position_indicator_poly, \"modulate:a\", 0, 0.5)
		fade_tween.tween_callback(position_indicator, \"hide\")
		

# SIGNALI ------------------------------------------------------------------------------------------------------


func _on_VisibilityNotifier2D_viewport_entered(viewport: Viewport) -> void:
	
	Global.strays_on_screen.append(self)
	visible_on_screen = true
	show()
		
		
func _on_VisibilityNotifier2D_viewport_exited(viewport: Viewport) -> void:
	
	Global.strays_on_screen.erase(self)
	visible_on_screen = false
	hide()


func _on_AnimationPlayer_animation_finished(anim_name: String) -> void:
	
	var die_animations: Array = [\"die_stray\", \"die_stray_1\", \"die_stray_2\", \"die_stray_3\", \"die_stray_4\", \"die_stray_5\", ]
	
	if die_animations.has(anim_name):
		# če postane stena
		if current_state == States.WALL: 
			# wall color
			modulate.a = 1
			color_poly.modulate = Global.color_white_pixel
			# ugasni delovanje
			set_physics_process(false)
			collision_shape_ext.disabled = true	
			position_indicator.modulate.a = 0
		# če umrje
		else: 
			collision_shape.set_deferred(\"disabled\", true)
			collision_shape_ext.set_deferred(\"disabled\", true)
			# odstrani barve iz huda in igre
			Global.game_manager.on_stray_die(self)
			call_deferred(\"queue_free\")


func _on_OverspawnDetect_body_entered(body: Node) -> void: # varovalka overspawn III ... če detect area zazna kolizijo
	# samo na štartu ... ob prikazu jo izklopim
	if body.is_in_group(Global.group_strays) and not body == self:
		printt (\"overspawn III on stray - stray area\", self)
		call_deferred(\"queue_free\")
	if body.is_in_group(Global.group_players):
		printt (\"overspawn III on player - stray area\", self)
		call_deferred(\"queue_free\")


func _on_Stray_tree_exiting() -> void:
	
	Global.game_manager.strays_in_game_count = - 1


func _on_Stray_tree_entered() -> void:
	
	Global.game_manager.strays_in_game_count = 1
	
	for stray in get_tree().get_nodes_in_group(Global.group_strays):
		if stray.global_position == global_position:
			printt (\"overspawn II on stray - stray tree entered\", self) 
			call_deferred(\"queue_free\")
			return
			
	for player in get_tree().get_nodes_in_group(Global.group_players):
		if player.global_position == global_position:
			printt (\"overspawn II on player - stray tree entered\", self) 
			call_deferred(\"queue_free\")
			return
"

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 15.95, 15.95 )

[sub_resource type="RectangleShape2D" id=142]
extents = Vector2( 15.95, 15.95 )

[sub_resource type="Animation" id=140]
resource_name = "die_stray"
length = 0.7
step = 0.02
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PoolRealArray( 0, 0.115685, 0.229303, 0.32, 0.379559, 0.46, 0.52, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.721569 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.647059 ), Color( 1, 1, 1, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate:a")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.115685, 0.229303, 0.32, 0.379609, 0.46, 0.52, 0.7 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0, 1.0, 0.0, 0.8, 0.0, 0.6, 0.0 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = false
tracks/2/keys = {
"times": PoolRealArray( 0.02, 0.22, 0.26, 0.52 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"values": [ {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
} ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = false
tracks/3/keys = {
"times": PoolRealArray( 0.7 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}
tracks/4/type = "method"
tracks/4/path = NodePath(".")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0.02, 0.221049, 0.26, 0.52 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"values": [ {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
} ]
}

[sub_resource type="Animation" id=138]
length = 1.3
step = 0.02
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PoolRealArray( 0, 0.06, 0.114726, 0.185737, 0.234325, 0.402195, 0.494201, 0.627508, 0.683042, 0.786978, 0.84, 0.939692, 1.02304, 1.06304, 1.18532, 1.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.215686 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.215686 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.545098 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.784314 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.54902 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.392157 ), Color( 1, 1, 1, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate:a")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.06, 0.112226, 0.190969, 0.234796, 0.400628, 0.492478, 0.623042, 0.683042, 0.792653, 0.84, 0.941542, 1.02304, 1.06304, 1.18532, 1.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 0.2, 1.0, 0.2, 1.0, 1.0, 0.55, 1.0, 0.2, 1.0, 0.8, 0.2, 0.55, 0.2, 0.55, 0.0 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = false
tracks/2/keys = {
"times": PoolRealArray( 0.0148915, 0.1, 0.14, 0.26, 0.383042, 0.423042, 0.603042, 0.771901, 0.811901, 0.86, 1.02304, 1.16532, 1.20532 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
} ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = false
tracks/3/keys = {
"times": PoolRealArray( 1.3 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}
tracks/4/type = "method"
tracks/4/path = NodePath(".")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0.0151901, 0.1, 0.14, 0.26, 0.381363, 0.423848, 0.602841, 0.770539, 0.810941, 0.858078, 1.02257, 1.16591, 1.20439 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
} ]
}

[sub_resource type="Animation" id=134]
resource_name = "die_stray_2"
length = 1.2
step = 0.02
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PoolRealArray( 0, 0.0666933, 0.2, 0.249016, 0.309016, 0.369016, 0.409016, 0.554183, 0.595503, 0.695503, 0.875503, 0.995503, 1.1155, 1.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.784314 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.54902 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate:a")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.0671055, 0.192166, 0.249016, 0.309016, 0.369016, 0.409016, 0.554183, 0.595503, 0.695503, 0.855503, 0.995503, 1.0355, 1.1155, 1.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.6, 1.0, 0.0, 1.0, 0.6, 0.6, 1.0, 0.0 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = false
tracks/2/keys = {
"times": PoolRealArray( 0, 0.18, 0.24, 0.349016, 0.389016, 0.575503, 0.635503, 0.835503, 0.955503, 1.0555, 1.1355 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
} ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = false
tracks/3/keys = {
"times": PoolRealArray( 1.2 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}
tracks/4/type = "method"
tracks/4/path = NodePath(".")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.179068, 0.24, 0.346734, 0.388097, 0.574271, 0.634586, 0.834991, 0.956199, 1.05528, 1.13513 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
} ]
}

[sub_resource type="Animation" id=135]
resource_name = "die_stray_3"
length = 1.1
step = 0.02
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PoolRealArray( 0, 0.06, 0.108591, 0.281275, 0.331525, 0.426225, 0.513585, 0.521275, 0.546975, 0.613745, 0.727483, 0.792, 0.870135, 0.913835, 1.1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.627451 ), Color( 1, 1, 1, 0.627451 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.470588 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.392157 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate:a")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.06, 0.172179, 0.281275, 0.33343, 0.426275, 0.543898, 0.613736, 0.729673, 0.789533, 0.866195, 0.910255, 1.1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0, 0.8, 1.0, 0.0, 0.8, 0.0, 0.6, 0.7, 0.0, 0.7, 1.0, 0.0 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = false
tracks/2/keys = {
"times": PoolRealArray( 0, 0.04, 0.261275, 0.321275, 0.521275, 0.721275, 0.741275, 0.861275, 0.941275 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
} ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = false
tracks/3/keys = {
"times": PoolRealArray( 1.1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}
tracks/4/type = "method"
tracks/4/path = NodePath(".")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.04, 0.26, 0.32, 0.52, 0.72, 0.74, 0.860964, 0.940807 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
} ]
}

[sub_resource type="Animation" id=136]
resource_name = "die_stray_4"
step = 0.02
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PoolRealArray( 0, 0.06, 0.229303, 0.319553, 0.379559, 0.501613, 0.535003, 0.601773, 0.712446, 0.831086, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.627451 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.392157 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate:a")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.06, 0.229303, 0.321458, 0.379609, 0.505558, 0.601764, 0.708506, 0.827506, 1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0, 1.0, 0.0, 0.8, 0.0, 0.6, 0.7, 1.0, 0.0 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = false
tracks/2/keys = {
"times": PoolRealArray( 0.02, 0.22, 0.26, 0.48, 0.5, 0.68, 0.74, 0.86 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
} ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = false
tracks/3/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}
tracks/4/type = "method"
tracks/4/path = NodePath(".")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0.02, 0.22, 0.259528, 0.479484, 0.5, 0.68, 0.74, 0.860964 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
} ]
}

[sub_resource type="Animation" id=137]
resource_name = "die_stray_5"
length = 1.1
step = 0.05
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PoolRealArray( 0, 0.05, 0.203418, 0.26, 0.4, 0.48, 0.58, 0.68, 0.8, 0.9, 1.1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.784314 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.54902 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate:a")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.05, 0.202442, 0.26, 0.4, 0.48, 0.58, 0.68, 0.8, 0.84, 0.92, 1.1 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ 1.0, 0.0, 1.0, 0.0, 0.6, 1.0, 0.0, 1.0, 0.6, 0.6, 1.0, 0.0 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = false
tracks/2/keys = {
"times": PoolRealArray( 0, 0.18, 0.22, 0.36, 0.48, 0.66, 0.68, 0.86, 0.94, 0.96 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
}, {
"args": [  ],
"method": "play_blinking_sound"
} ]
}
tracks/3/type = "method"
tracks/3/path = NodePath(".")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = false
tracks/3/keys = {
"times": PoolRealArray( 1.1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "queue_free"
} ]
}
tracks/4/type = "method"
tracks/4/path = NodePath(".")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.179068, 0.221049, 0.358477, 0.479484, 0.659887, 0.678837, 0.860964, 0.940807, 0.959085 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ),
"values": [ {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
}, {
"args": [ "blinking" ],
"method": "play_sound"
} ]
}

[sub_resource type="Animation" id=141]
resource_name = "glitch_intro"
length = 0.2
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = false
tracks/0/keys = {
"times": PoolRealArray( 0, 0.106689, 0.172837, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0.196078 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0.196078 ), Color( 1, 1, 1, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate:a")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.103803, 0.170441, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.2, 1.0, 0.2, 1.0 ]
}
tracks/2/type = "method"
tracks/2/path = NodePath(".")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = false
tracks/2/keys = {
"times": PoolRealArray( 0.103848 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "play_blinking_sound"
} ]
}

[sub_resource type="AudioStreamRandomPitch" id=143]
audio_stream = ExtResource( 14 )

[sub_resource type="AudioStreamRandomPitch" id=144]
audio_stream = ExtResource( 12 )
random_pitch = 1.0

[sub_resource type="AudioStreamRandomPitch" id=145]
audio_stream = ExtResource( 4 )

[sub_resource type="AudioStreamRandomPitch" id=146]
audio_stream = ExtResource( 5 )

[sub_resource type="AudioStreamRandomPitch" id=147]
audio_stream = ExtResource( 9 )

[sub_resource type="AudioStreamRandomPitch" id=148]
audio_stream = ExtResource( 15 )

[sub_resource type="AudioStreamRandomPitch" id=149]
audio_stream = ExtResource( 6 )

[sub_resource type="AudioStreamRandomPitch" id=150]
audio_stream = ExtResource( 13 )

[sub_resource type="AudioStreamRandomPitch" id=151]
audio_stream = ExtResource( 8 )

[sub_resource type="AudioStreamRandomPitch" id=152]
audio_stream = ExtResource( 18 )

[node name="StrayNaked" type="KinematicBody2D"]
script = SubResource( 153 )

[node name="ColorPoly" type="Polygon2D" parent="."]
position = Vector2( -16, -16 )
polygon = PoolVector2Array( 1, 1, 1, 0, 31.0008, 0, 31, 1, 32, 1, 32, 31, 31, 31, 31, 32, 1, 32, 1, 31, 0, 31, 0, 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 1 )

[node name="CollisionShapeExt" type="CollisionShape2D" parent="."]
shape = SubResource( 142 )

[node name="PositionIndicator" type="Node2D" parent="."]

[node name="Background" type="Polygon2D" parent="PositionIndicator"]
position = Vector2( -16, -16 )
color = Color( 1, 1, 1, 0 )
polygon = PoolVector2Array( 0, 0, 32, 0, 32, 32, 0, 32 )

[node name="PositionPoly" type="Polygon2D" parent="PositionIndicator"]
position = Vector2( -12, -12 )
polygon = PoolVector2Array( 10, 10, 14, 10, 14, 14, 10, 14 )

[node name="PositionPolyBig" type="Polygon2D" parent="PositionIndicator"]
visible = false
position = Vector2( -12, -12 )
color = Color( 0.980392, 0.980392, 0.980392, 1 )
polygon = PoolVector2Array( 8, 8, 16, 8, 16, 16, 8, 16 )

[node name="Vision" type="Node2D" parent="."]

[node name="VisionRay1" type="RayCast2D" parent="Vision"]
position = Vector2( 0, -15.9 )
enabled = true
cast_to = Vector2( 47, 0 )

[node name="VisionRay2" type="RayCast2D" parent="Vision"]
enabled = true
cast_to = Vector2( 47, 0 )

[node name="VisionRay3" type="RayCast2D" parent="Vision"]
position = Vector2( 0, 15.9 )
enabled = true
cast_to = Vector2( 47, 0 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/die_stray = SubResource( 140 )
anims/die_stray_1 = SubResource( 138 )
anims/die_stray_2 = SubResource( 134 )
anims/die_stray_3 = SubResource( 135 )
anims/die_stray_4 = SubResource( 136 )
anims/die_stray_5 = SubResource( 137 )
anims/glitch_1 = ExtResource( 2 )
anims/glitch_2 = ExtResource( 3 )
anims/glitch_3 = ExtResource( 1 )
anims/glitch_intro = SubResource( 141 )

[node name="Sounds" type="Node2D" parent="."]

[node name="Stepping" type="Node2D" parent="Sounds"]

[node name="Step1" type="AudioStreamPlayer" parent="Sounds/Stepping"]
stream = ExtResource( 11 )
volume_db = -10.0
pitch_scale = 1.1
bus = "GameSfx"

[node name="Step2" type="AudioStreamPlayer" parent="Sounds/Stepping"]
stream = ExtResource( 19 )
volume_db = -10.0
pitch_scale = 1.1
bus = "GameSfx"

[node name="Step4" type="AudioStreamPlayer" parent="Sounds/Stepping"]
stream = ExtResource( 17 )
volume_db = -10.0
pitch_scale = 1.1
bus = "GameSfx"

[node name="Step5" type="AudioStreamPlayer" parent="Sounds/Stepping"]
stream = ExtResource( 10 )
volume_db = -10.0
pitch_scale = 1.1
bus = "GameSfx"

[node name="Step3" type="AudioStreamPlayer" parent="Sounds/Stepping"]
stream = ExtResource( 16 )
volume_db = -10.0
pitch_scale = 1.1
bus = "GameSfx"

[node name="Blinking" type="Node2D" parent="Sounds"]

[node name="Blink1" type="AudioStreamPlayer" parent="Sounds/Blinking"]
stream = SubResource( 143 )
volume_db = -15.0
bus = "GameSfx"

[node name="Blink2" type="AudioStreamPlayer" parent="Sounds/Blinking"]
stream = SubResource( 144 )
volume_db = -15.0
bus = "GameSfx"

[node name="Blink3" type="AudioStreamPlayer" parent="Sounds/Blinking"]
stream = SubResource( 145 )
volume_db = -15.0
bus = "GameSfx"

[node name="Blink4_mute" type="AudioStreamPlayer" parent="Sounds/Blinking"]
stream = SubResource( 146 )
volume_db = -80.0
bus = "GameSfx"

[node name="Blink5_mute" type="AudioStreamPlayer" parent="Sounds/Blinking"]
stream = SubResource( 146 )
volume_db = -80.0
bus = "GameSfx"

[node name="Blink6_mute" type="AudioStreamPlayer" parent="Sounds/Blinking"]
stream = SubResource( 146 )
volume_db = -80.0
bus = "GameSfx"

[node name="BlinkingStatic" type="Node2D" parent="Sounds"]

[node name="BlinkStatic1" type="AudioStreamPlayer" parent="Sounds/BlinkingStatic"]
stream = SubResource( 147 )
pitch_scale = 1.2
bus = "GameSfx"

[node name="BlinkStatic2" type="AudioStreamPlayer" parent="Sounds/BlinkingStatic"]
stream = SubResource( 148 )
pitch_scale = 1.2
bus = "GameSfx"

[node name="BlinkStatic3" type="AudioStreamPlayer" parent="Sounds/BlinkingStatic"]
stream = SubResource( 149 )
pitch_scale = 1.2
bus = "GameSfx"

[node name="BlinkStatic4" type="AudioStreamPlayer" parent="Sounds/BlinkingStatic"]
stream = SubResource( 150 )
pitch_scale = 1.2
bus = "GameSfx"

[node name="BlinkStatic5" type="AudioStreamPlayer" parent="Sounds/BlinkingStatic"]
stream = SubResource( 151 )
pitch_scale = 1.2
bus = "GameSfx"

[node name="BlinkStatic6" type="AudioStreamPlayer" parent="Sounds/BlinkingStatic"]
stream = SubResource( 152 )
pitch_scale = 1.2
bus = "GameSfx"

[connection signal="tree_entered" from="." to="." method="_on_Stray_tree_entered"]
[connection signal="tree_exiting" from="." to="." method="_on_Stray_tree_exiting"]
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
